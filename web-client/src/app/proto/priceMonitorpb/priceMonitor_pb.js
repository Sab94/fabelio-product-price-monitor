/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.priceMonitor.AddProductRequest', null, global);
goog.exportSymbol('proto.priceMonitor.AddProductResponse', null, global);
goog.exportSymbol('proto.priceMonitor.GetProductRequest', null, global);
goog.exportSymbol('proto.priceMonitor.GetProductsRequest', null, global);
goog.exportSymbol('proto.priceMonitor.PriceTime', null, global);
goog.exportSymbol('proto.priceMonitor.Product', null, global);
goog.exportSymbol('proto.priceMonitor.ProductResponse', null, global);
goog.exportSymbol('proto.priceMonitor.ProductsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.priceMonitor.Product.repeatedFields_, null);
};
goog.inherits(proto.priceMonitor.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.Product.displayName = 'proto.priceMonitor.Product';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.priceMonitor.Product.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.Product} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    url: msg.getUrl(),
    images: msg.getImages(),
    historyList: jspb.Message.toObjectList(msg.getHistoryList(),
    proto.priceMonitor.PriceTime.toObject, includeInstance),
    createdAt: msg.getCreatedAt()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.Product}
 */
proto.priceMonitor.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.Product;
  return proto.priceMonitor.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.Product}
 */
proto.priceMonitor.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImages(value);
      break;
    case 4:
      var value = new proto.priceMonitor.PriceTime;
      reader.readMessage(value,proto.priceMonitor.PriceTime.deserializeBinaryFromReader);
      msg.getHistoryList().push(value);
      msg.setHistoryList(msg.getHistoryList());
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.Product} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.Product.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.Product.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getImages();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.priceMonitor.PriceTime.serializeBinaryToWriter
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.Product} The clone.
 */
proto.priceMonitor.Product.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.Product} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.priceMonitor.Product.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.priceMonitor.Product.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.priceMonitor.Product.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.priceMonitor.Product.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string images = 3;
 * @return {string}
 */
proto.priceMonitor.Product.prototype.getImages = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.priceMonitor.Product.prototype.setImages = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated PriceTime history = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.priceMonitor.PriceTime>}
 */
proto.priceMonitor.Product.prototype.getHistoryList = function() {
  return /** @type{!Array.<!proto.priceMonitor.PriceTime>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.priceMonitor.PriceTime, 4));
};


/** @param {Array.<!proto.priceMonitor.PriceTime>} value  */
proto.priceMonitor.Product.prototype.setHistoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.priceMonitor.Product.prototype.clearHistoryList = function() {
  this.setHistoryList([]);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.priceMonitor.Product.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.priceMonitor.Product.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.PriceTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priceMonitor.PriceTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.PriceTime.displayName = 'proto.priceMonitor.PriceTime';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.PriceTime.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.PriceTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.PriceTime} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.PriceTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: msg.getPrice(),
    time: msg.getTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.PriceTime}
 */
proto.priceMonitor.PriceTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.PriceTime;
  return proto.priceMonitor.PriceTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.PriceTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.PriceTime}
 */
proto.priceMonitor.PriceTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.PriceTime} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.PriceTime.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.PriceTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.PriceTime.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.PriceTime} The clone.
 */
proto.priceMonitor.PriceTime.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.PriceTime} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.priceMonitor.PriceTime.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.priceMonitor.PriceTime.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.priceMonitor.PriceTime.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.priceMonitor.PriceTime.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.AddProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priceMonitor.AddProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.AddProductRequest.displayName = 'proto.priceMonitor.AddProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.AddProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.AddProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.AddProductRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.AddProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: msg.getUrl()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.AddProductRequest}
 */
proto.priceMonitor.AddProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.AddProductRequest;
  return proto.priceMonitor.AddProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.AddProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.AddProductRequest}
 */
proto.priceMonitor.AddProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.AddProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.AddProductRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.AddProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.AddProductRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.AddProductRequest} The clone.
 */
proto.priceMonitor.AddProductRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.AddProductRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.priceMonitor.AddProductRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.priceMonitor.AddProductRequest.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.AddProductResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priceMonitor.AddProductResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.AddProductResponse.displayName = 'proto.priceMonitor.AddProductResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.AddProductResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.AddProductResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.AddProductResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.AddProductResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && proto.priceMonitor.Product.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.AddProductResponse}
 */
proto.priceMonitor.AddProductResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.AddProductResponse;
  return proto.priceMonitor.AddProductResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.AddProductResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.AddProductResponse}
 */
proto.priceMonitor.AddProductResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.priceMonitor.Product;
      reader.readMessage(value,proto.priceMonitor.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.AddProductResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.AddProductResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.AddProductResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.AddProductResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.priceMonitor.Product.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.AddProductResponse} The clone.
 */
proto.priceMonitor.AddProductResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.AddProductResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Product product = 1;
 * @return {proto.priceMonitor.Product}
 */
proto.priceMonitor.AddProductResponse.prototype.getProduct = function() {
  return /** @type{proto.priceMonitor.Product} */ (
    jspb.Message.getWrapperField(this, proto.priceMonitor.Product, 1));
};


/** @param {proto.priceMonitor.Product|undefined} value  */
proto.priceMonitor.AddProductResponse.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.priceMonitor.AddProductResponse.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.priceMonitor.AddProductResponse.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.GetProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priceMonitor.GetProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.GetProductRequest.displayName = 'proto.priceMonitor.GetProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.GetProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.GetProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.GetProductRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.GetProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.GetProductRequest}
 */
proto.priceMonitor.GetProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.GetProductRequest;
  return proto.priceMonitor.GetProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.GetProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.GetProductRequest}
 */
proto.priceMonitor.GetProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.GetProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.GetProductRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.GetProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.GetProductRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.GetProductRequest} The clone.
 */
proto.priceMonitor.GetProductRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.GetProductRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.priceMonitor.GetProductRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.priceMonitor.GetProductRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.ProductResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priceMonitor.ProductResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.ProductResponse.displayName = 'proto.priceMonitor.ProductResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.ProductResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.ProductResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.ProductResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.ProductResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && proto.priceMonitor.Product.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.ProductResponse}
 */
proto.priceMonitor.ProductResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.ProductResponse;
  return proto.priceMonitor.ProductResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.ProductResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.ProductResponse}
 */
proto.priceMonitor.ProductResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.priceMonitor.Product;
      reader.readMessage(value,proto.priceMonitor.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.ProductResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.ProductResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.ProductResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.ProductResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.priceMonitor.Product.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.ProductResponse} The clone.
 */
proto.priceMonitor.ProductResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.ProductResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Product product = 1;
 * @return {proto.priceMonitor.Product}
 */
proto.priceMonitor.ProductResponse.prototype.getProduct = function() {
  return /** @type{proto.priceMonitor.Product} */ (
    jspb.Message.getWrapperField(this, proto.priceMonitor.Product, 1));
};


/** @param {proto.priceMonitor.Product|undefined} value  */
proto.priceMonitor.ProductResponse.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.priceMonitor.ProductResponse.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.priceMonitor.ProductResponse.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.GetProductsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priceMonitor.GetProductsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.GetProductsRequest.displayName = 'proto.priceMonitor.GetProductsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.GetProductsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.GetProductsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.GetProductsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.GetProductsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.GetProductsRequest}
 */
proto.priceMonitor.GetProductsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.GetProductsRequest;
  return proto.priceMonitor.GetProductsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.GetProductsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.GetProductsRequest}
 */
proto.priceMonitor.GetProductsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.GetProductsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.GetProductsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.GetProductsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.GetProductsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.GetProductsRequest} The clone.
 */
proto.priceMonitor.GetProductsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.GetProductsRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priceMonitor.ProductsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.priceMonitor.ProductsResponse.repeatedFields_, null);
};
goog.inherits(proto.priceMonitor.ProductsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.priceMonitor.ProductsResponse.displayName = 'proto.priceMonitor.ProductsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.priceMonitor.ProductsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priceMonitor.ProductsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.priceMonitor.ProductsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priceMonitor.ProductsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.priceMonitor.ProductsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.priceMonitor.Product.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priceMonitor.ProductsResponse}
 */
proto.priceMonitor.ProductsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priceMonitor.ProductsResponse;
  return proto.priceMonitor.ProductsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priceMonitor.ProductsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priceMonitor.ProductsResponse}
 */
proto.priceMonitor.ProductsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.priceMonitor.Product;
      reader.readMessage(value,proto.priceMonitor.Product.deserializeBinaryFromReader);
      msg.getProductsList().push(value);
      msg.setProductsList(msg.getProductsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.priceMonitor.ProductsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.ProductsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priceMonitor.ProductsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.priceMonitor.ProductsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.priceMonitor.Product.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.priceMonitor.ProductsResponse} The clone.
 */
proto.priceMonitor.ProductsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.priceMonitor.ProductsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Product products = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.priceMonitor.Product>}
 */
proto.priceMonitor.ProductsResponse.prototype.getProductsList = function() {
  return /** @type{!Array.<!proto.priceMonitor.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.priceMonitor.Product, 1));
};


/** @param {Array.<!proto.priceMonitor.Product>} value  */
proto.priceMonitor.ProductsResponse.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.priceMonitor.ProductsResponse.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


goog.object.extend(exports, proto.priceMonitor);
